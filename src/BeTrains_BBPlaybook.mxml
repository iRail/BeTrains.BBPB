<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:view="be.irail.betrains.playbook.view.*"
			   skinClass="be.irail.betrains.playbook.view.components.skins.ApplicationSkin"
			   frameRate="30"
			   width="1024"
			   height="600"
			   usePreloader="true"
			   preloader="be.irail.betrains.playbook.view.components.preloader.BeTrainsLoader"
			   preinitialize="preinitializeHandler()"
			   applicationComplete="applicationCompleteHandler()"
			   creationComplete="creationCompleteHandler()">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>

	<fx:Style source="styles.css"/>

	<fx:Script>
		<![CDATA[
			import be.irail.api.event.IRailResultEvent;
			import be.irail.api.methodgroup.Stations;
			import be.irail.betrains.playbook.controller.AppSettings;
			import be.irail.betrains.playbook.controller.ModelLocator;
			import be.irail.betrains.playbook.data.RecentQueriesCollection;
			import be.irail.betrains.playbook.utils.SerializeUtil;
			import be.irail.betrains.playbook.view.MainView;

			import mx.collections.ArrayCollection;

			import qnx.locale.LocaleManager;

			private var _model:ModelLocator = ModelLocator.getInstance();

			private var _file:File;

			private function preinitializeHandler():void {
				setupResourceManager();
				readStations();
			}

			private function creationCompleteHandler():void {
				NativeApplication.nativeApplication.addEventListener(Event.EXITING, onApplicationExiting);
				callLater(setupMainView);
			/* Alert.show(
				"Supports touch events: " + Multitouch.supportsTouchEvents + "\n" +
				"Maximum supported touch points: " + Multitouch.maxTouchPoints + "\n\n" +
				"Supports gesture events: " + Multitouch.supportsGestureEvents + "\n" +
				"Supported gestures: " + Multitouch.supportedGestures, "The BlackBerry Playbook: Multitouch support"); */
			}


			private function storeStationData():void {
				var stationService:Stations = new Stations();
				stationService.getAllStations();
				stationService.addEventListener(IRailResultEvent.STATION_LIST_RESULT, onAllStationsResult);
			}

			private function onAllStationsResult(event:IRailResultEvent):void {
				_file = File.desktopDirectory.resolvePath("stations.bpd");
				var stream:FileStream = new FileStream();
				var ba:ByteArray = SerializeUtil.serialize(event.result);
				stream.openAsync(_file, FileMode.WRITE);
				stream.writeBytes(ba);
			}

			private function readStations():void {
				_file = AppSettings.STATIONSLIST_STORAGE_LOCATION;
				var stream:FileStream = new FileStream();

				stream.openAsync(_file, FileMode.READ);
				stream.addEventListener(Event.COMPLETE, stationDataReadHandler);
				stream.addEventListener(IOErrorEvent.IO_ERROR, readStationsIOErrorHandler);
			}

			private function readRecents():void {
				_file = AppSettings.RECENT_STORAGE_LOCATION;

				if (_file.exists) {
					var stream:FileStream = new FileStream();
					stream.openAsync(_file, FileMode.READ);
					stream.addEventListener(Event.COMPLETE, recentDataReadHandler);
					stream.addEventListener(IOErrorEvent.IO_ERROR, readRecentIOErrorHandler);
				} else {
					_model.recentSchedulerQueries = new RecentQueriesCollection();
				}
			}

			private function writeRecents():void {
				_file = AppSettings.RECENT_STORAGE_LOCATION;
				var stream:FileStream = new FileStream();
				var ba:ByteArray = SerializeUtil.serialize(_model.recentSchedulerQueries.toArray());
				stream.openAsync(_file, FileMode.WRITE);
				stream.writeBytes(ba);
			}

			private function stationDataReadHandler(event:Event):void {
				var stream:FileStream = event.target as FileStream;
				var ba:ByteArray = new ByteArray();
				stream.readBytes(ba, 0, stream.bytesAvailable);
				stream.close();

				var data:Object = SerializeUtil.deserialize(ba);
				_model.stations = new ArrayCollection((data.data) as Array);

				_file = null;
				readRecents();
			}

			private function recentDataReadHandler(event:Event):void {
				var stream:FileStream = event.target as FileStream;
				if (stream.bytesAvailable > 0) {
					var ba:ByteArray = new ByteArray();

					stream.readBytes(ba, 0, stream.bytesAvailable);
					stream.close();

					var data:Object = SerializeUtil.deserialize(ba);
					_model.recentSchedulerQueries = new RecentQueriesCollection(data as Array);
				} else {
					_file.deleteFile();
				}
				_file = null;
			}

			private function readStationsIOErrorHandler(event:IOErrorEvent):void {
				_model.stations = new ArrayCollection();
				readRecents();
			}

			private function readRecentIOErrorHandler(event:IOErrorEvent):void {
				_model.recentSchedulerQueries = new RecentQueriesCollection();
			}

			private function onApplicationExiting(event:Event):void {
				writeRecents();
			}

			private function setupResourceManager():void {
				var deviceLocale:String = LocaleManager.localeManager.getDeviceLocale();
				if (AppSettings.supportedLanguagesLocale.indexOf(deviceLocale) > -1) {
					LocaleManager.localeManager.setLocale(deviceLocale);
				} else {
					LocaleManager.localeManager.setLocale("en_US");
				}
				LocaleManager.localeManager.dispatchEvent(new Event(Event.CHANGE));
			}

			protected function applicationCompleteHandler():void {
				loaderInfo.uncaughtErrorEvents.addEventListener(UncaughtErrorEvent.UNCAUGHT_ERROR, onUncaughtError);
			}

			private function onUncaughtError(event:UncaughtErrorEvent):void {
			}

			private function setupMainView():void {
				var mv:MainView = new MainView();
				this.addElement(mv);
			}
		]]>
	</fx:Script>
</s:Application>
