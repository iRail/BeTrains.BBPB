<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   frameRate="30"
					   backgroundFrameRate="12"
					   width="1024"
					   height="600"
					   skinClass="be.irail.betrains.playbook.view.skins.ApplicationSkin"
					   preinitialize="preinitializeApplication()"
					   applicationComplete="applicationCompleteHandler()"
					   creationComplete="creationCompleteHandler()"
					   xmlns:components="be.irail.betrains.playbook.view.components.*"
					   xmlns:scheduler="be.irail.betrains.playbook.view.scheduler.*"
					   xmlns:stations="be.irail.betrains.playbook.view.stations.*">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import be.irail.api.data.stations.IRStation;
			import be.irail.api.event.IRailResultEvent;
			import be.irail.api.methodgroup.Stations;
			import be.irail.betrains.playbook.controller.ModelLocator;
			import be.irail.betrains.playbook.utils.SerializeUtil;

			import mx.collections.ArrayCollection;
			import mx.resources.ResourceManager;

			import org.springextensions.actionscript.context.support.FlexXMLApplicationContext;

			import spark.events.IndexChangeEvent;

			private var _context:FlexXMLApplicationContext = new FlexXMLApplicationContext();
			private var _supportedLanguagesLocale:Array = ["en_US"];

			private var _model:ModelLocator = ModelLocator.getInstance();

			private var _file:File;

			private function creationCompleteHandler():void {
				NativeApplication.nativeApplication.addEventListener(Event.EXITING, onApplicationExiting);

				setupApplicationContext();
				_context.load();
			}

			private function preinitializeApplication():void {
				registerClassAlias("irail.IRStation", IRStation);
				readStations();
			}

			private function storeStationData():void {
				var stationService:Stations = new Stations();
				stationService.getAllStations();
				stationService.addEventListener(IRailResultEvent.STATION_LIST_RESULT, onAllStationsResult);
			}

			private function onAllStationsResult(event:IRailResultEvent):void {
				_file = File.desktopDirectory.resolvePath("stations.dat"); //File.applicationDirectory.resolvePath("data/stations.dat");
				var stream:FileStream = new FileStream();
				var ba:ByteArray = SerializeUtil.serialize(event.result);
				stream.openAsync(_file, FileMode.WRITE);
				stream.writeBytes(ba);
			}

			private function readStations():void {
				_file = new File();
				_file = File.applicationDirectory.resolvePath("data/stations.dat");
				var stream:FileStream = new FileStream();

				stream.openAsync(_file, FileMode.READ);
				stream.addEventListener(Event.COMPLETE, stationDataReadHandler);
				stream.addEventListener(IOErrorEvent.IO_ERROR, readIOErrorHandler);
			}

			private function stationDataReadHandler(event:Event):void {
				var stream:FileStream = event.target as FileStream;
				var ba:ByteArray = new ByteArray();
				stream.readBytes(ba, 0, stream.bytesAvailable);
				stream.close();

				var data:Object = SerializeUtil.deserialize(ba);
				_model.stations = new ArrayCollection((data.data) as Array);
			}

			private function readIOErrorHandler(event:IOErrorEvent):void {
				throw new Error("data not cached")
			}

			private function onApplicationExiting(event:Event):void {

			}

			private function setupResourceManager():void {
				// default locale chain (first defined language in _supportedLanguagesLocale)
				ResourceManager.getInstance().localeChain = [_supportedLanguagesLocale[0]];
			}

			private function setupApplicationContext():void {
				//Resource Bundles
				for each (var code:String in _supportedLanguagesLocale) {
					_context.addResourceBundleLocation("/bundles/" + code + "/resources.properties", "resources", code);
				}

				_context.addEventListener(Event.COMPLETE, applicationContext_completeHandler);
				_context.addEventListener(IOErrorEvent.IO_ERROR, appContext_ioErrorHandler);
			}

			private function applicationContext_completeHandler(event:Event):void {
				_context.removeEventListener(Event.COMPLETE, applicationContext_completeHandler);
				_context.removeEventListener(IOErrorEvent.IO_ERROR, appContext_ioErrorHandler);

				setupResourceManager();
			}

			private function appContext_ioErrorHandler(event:IOErrorEvent):void {
				throw event;
			}

			protected function applicationCompleteHandler():void {
				loaderInfo.uncaughtErrorEvents.addEventListener(UncaughtErrorEvent.UNCAUGHT_ERROR, onUncaughtError);
			}

			private function onUncaughtError(event:UncaughtErrorEvent):void {
			}

			private function applicationBar_changeHandler(event:IndexChangeEvent):void {
				vs.selectedIndex = event.newIndex;
			}
		]]>
	</fx:Script>

	<mx:ViewStack id="vs"
				  width="100%"
				  height="100%">
		<s:NavigatorContent>
			<scheduler:SchedulerView id="scheduler"/>
		</s:NavigatorContent>
		<s:NavigatorContent>
			<stations:StationsView id="stations"/>
		</s:NavigatorContent>
	</mx:ViewStack>

	<components:ApplicationBar id="applicationBar"
							   left="0"
							   right="0"
							   bottom="0"
							   change="applicationBar_changeHandler(event)">
	</components:ApplicationBar>
</s:WindowedApplication>
