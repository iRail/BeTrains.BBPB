<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:scheduler="be.irail.betrains.playbook.view.scheduler.*"
		 xmlns:components="be.irail.betrains.playbook.view.components.*"
		 xmlns:stations="be.irail.betrains.playbook.view.stations.*"
		 xmlns:recent="be.irail.betrains.playbook.view.recent.*"
		 xmlns:favs="be.irail.betrains.playbook.view.favs.*"
		 xmlns:chat="be.irail.betrains.playbook.view.chat.*"
		 xmlns:traffic="be.irail.betrains.playbook.view.traffic.*"
		 width="100%"
		 height="100%"
		 creationComplete="creationCompleteHandler(event)">
	<fx:Declarations>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import be.irail.api.data.stations.IRStation;
			import be.irail.betrains.playbook.controller.ModelLocator;
			import be.irail.betrains.playbook.data.FavouriteConnection;
			import be.irail.betrains.playbook.utils.PopUpUtil;
			import be.irail.betrains.playbook.view.about.AboutPopup;
			import be.irail.betrains.playbook.view.components.MainViewItem;
			import be.irail.betrains.playbook.view.favs.FavouriteEvent;

			import com.greensock.*;
			import com.greensock.easing.Expo;
			import com.greensock.plugins.*;

			import mx.core.*;
			import mx.events.FlexEvent;

			import qnx.events.QNXApplicationEvent;
			import qnx.system.QNXApplication;

			import spark.events.IndexChangeEvent;

			include "resource_wrapper.as";

			[Bindable]
			private var _model:ModelLocator = ModelLocator.getInstance();

			// ----------------------------
			// showSettings
			// ----------------------------

			private var _showSettings:Boolean;

			[Bindable(event="showSettingsChange")]
			public function get showSettings():Boolean {
				return _showSettings;
			}

			public function set showSettings(value:Boolean):void {
				if (value !== _showSettings) {
					_showSettings = value;
					dispatchEvent(new Event("showSettingsChange"));
				}
			}

			private function applicationBar_changeHandler(event:IndexChangeEvent):void {
				if (event.newIndex != applicationBar.ABOUT_INDEX) {
					vs.selectedIndex = event.newIndex;
				} else {
					applicationBar.selectedIndex = event.oldIndex;

					var popup:AboutPopup = new AboutPopup();
					PopUpUtil.openPopUp(popup, true);
				}
			}

			private function vs_changeHandler(event:IndexChangeEvent):void {
				if (event.oldIndex > -1 && (event.oldIndex != applicationBar.ABOUT_INDEX)) {
					var oldNavElement:MainViewItem = MainViewItem(vs.getElementAt(event.oldIndex));
					oldNavElement.destroy();
				}

				if (event.newIndex > -1) {
					MainViewItem(vs.getElementAt(event.newIndex)).make();
				}

			}

			private function favourites_favouriteChangeHandler(event:Event):void {
				event.stopImmediatePropagation();
				var fav:FavouriteConnection = favourites.selectedFavourite;

				if (fav) {
					switchToView(2);
					scheduler.setDataByFavourite(fav);
				}
			}

			private function creationCompleteHandler(event:FlexEvent):void {
				PopUpUtil.registerPopUpParent(popUpParent);

				splashDuplicate.visible = true;
				TweenLite.to(splashDuplicate, 2, {y: -600, ease: Expo.easeIn, delay: 0, onComplete: destroySD});
			}

			private function destroySD():void {
				splashDuplicate.visible = false;
				doDestroySD();
				detectSwipeDown();

				this.addEventListener(FavouriteEvent.SEE_STATION, onFavStationSelect);
			}

			private function detectSwipeDown():void {
				QNXApplication.qnxApplication.addEventListener(QNXApplicationEvent.SWIPE_DOWN, onSwipeDown);
			}

			private function onSwipeDown(event:QNXApplicationEvent):void {
				if (!showSettings && !PopUpUtil.hasOpenPopUps) {
					this.showSettings = true;
				}
			}

			private function doDestroySD():void {
				splashDuplicate.includeInLayout = false;
				this.removeElement(splashDuplicate);
				splashDuplicate.source = null;
				splashDuplicate = null;
			}

			private function onFavStationSelect(e:FavouriteEvent):void {
				e.stopImmediatePropagation();
				stations.selectStation(e.data as IRStation);

				setTimeout(switchToView, 100, 3);
			}

			private function switchToView(index:int):void {
				applicationBar.selectedIndex = index;
			}

			protected function settingspanel1_hideBarHandler(event:Event):void {
				this.showSettings = false;
			}
		]]>
	</fx:Script>
	<components:SparkViewStack id="vs"
							   left="0"
							   right="0"
							   top="0"
							   bottom="74"
							   change="vs_changeHandler(event)">
		<recent:RecentSchedulerQueries id="recent"
									   title="{r('recent.title')}"/>
		<favs:FavouritesView id="favourites"
							 favourites="{_model.favourites}"
							 favouriteChange="favourites_favouriteChangeHandler(event)"
							 title="{r('favs.title')}"/>
		<scheduler:SchedulerView id="scheduler"
								 title="{r('scheduler.title')}"/>
		<stations:StationsView id="stations"
							   title="{r('liveboard.title')}"/>
		<traffic:TrafficIssuesView id="works"/>
		<!--
			<chat:ChatView id="chat"
						   title="{r('chat.title')}"/>
		-->
	</components:SparkViewStack>

	<components:ApplicationBar id="applicationBar"
							   left="0"
							   right="0"
							   bottom="0"
							   change="applicationBar_changeHandler(event)">
	</components:ApplicationBar>

	<components:SettingsPanel left="0"
							  right="0"
							  top="0"
							  bottom="0"
							  hideBar="settingspanel1_hideBarHandler(event)"
							  visible="{showSettings}"/>

	<mx:UIComponent id="popUpParent"
					left="0"
					right="0"
					top="0"
					bottom="0"/>

	<s:BitmapImage id="splashDuplicate"
				   source="@Embed('splash.png')"
				   smooth="true"
				   width="100%"
				   height="100%"/>
</s:Group>
