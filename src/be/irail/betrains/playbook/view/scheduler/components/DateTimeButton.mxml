<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 minHeight="60"
		 creationComplete="touchbutton1_creationCompleteHandler(event)">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Metadata>
	[Event(name="dateChange",type="flash.events.Event")]
</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import be.irail.api.data.scheduler.DateTimeIndicator;

			import mx.events.FlexEvent;

			import qnx.locale.LocaleManager;
			import qnx.ui.buttons.ToggleSwitch;
			import qnx.ui.data.DataProvider;
			import qnx.ui.picker.Picker;
			import qnx.ui.skins.SkinStates;
			import qnx.ui.skins.picker.PickerListBackgroundWhite;

			[Bindable]
			private var _locale:LocaleManager = LocaleManager.localeManager;

			private var currentYear:Number = new Date().getFullYear();

			private var arrDepSwitch:ToggleSwitch;

			private var _minuteStep:int = 5;

			// ----------------------------
			// date
			// ----------------------------

			private var _date:Date = new Date();

			[Bindable(event="dateChange")]
			public function get selectedDate():Date {
				return _date;
			}

			public function set selectedDate(value:Date):void {
				_date = value;
				dispatchEvent(new Event("dateChange"));
			}

			// ----------------------------
			// arrDep (read-only)
			// ----------------------------

			private var _arrDep:String;

			[Bindable(event="dateChange")]
			public function get arrDep():String {
				return (arrDepSwitch && arrDepSwitch.selected) ? DateTimeIndicator.DEPARTURE : DateTimeIndicator.ARRIVAL;
			}


			[Bindable(event="dateChange")]
			public function get dateText():String {
				if (!selectedDate) {
					return "";
				}

				return _date.toDateString() + " " + _date.toTimeString();
			}

			protected function touchbutton1_creationCompleteHandler(event:FlexEvent):void {
				createPicker();
				createTimePicker();
				createSwitch();

				parseDateForPicker(selectedDate.date, selectedDate.month, selectedDate.fullYear, selectedDate.hours, selectedDate.minutes);
			}

			private function createPicker():void {
				// Create the picker and add the main DataProvider

				var picker:Picker = new Picker();
				picker.setListBackgroundSkin(PickerListBackgroundWhite);
				picker.name = "datePicker";
				picker.width = 200;
				picker.height = 50;

				var arrDay:Array = [];

				// Populate the month array and create the
				// day DataProvider 
				var i:int;
				for (i = 1; i < 32; i++) {
					arrDay.push({label: (i < 10) ? '0' + i : '' + i, value: i});
				}

				var months:Array = [
					{label: _locale.getResource('system.months.january'), value: 0},
					{label: _locale.getResource('system.months.february'), value: 1},
					{label: _locale.getResource('system.months.march'), value: 2},
					{label: _locale.getResource('system.months.april'), value: 3},
					{label: _locale.getResource('system.months.may'), value: 4},
					{label: _locale.getResource('system.months.june'), value: 5},
					{label: _locale.getResource('system.months.july'), value: 6},
					{label: _locale.getResource('system.months.august'), value: 7},
					{label: _locale.getResource('system.months.september'), value: 8},
					{label: _locale.getResource('system.months.october'), value: 9},
					{label: _locale.getResource('system.months.november'), value: 10},
					{label: _locale.getResource('system.months.december'), value: 11}
					];

				var dayDP:DataProvider = new DataProvider(arrDay),
					monthDP:DataProvider = new DataProvider(months),
					dpp:Array = new Array();

				dpp.push(dayDP);
				dpp.push(monthDP);

				picker.dataProvider = new DataProvider(dpp);

				pickerContainer.addChild(picker);

				picker.x = -2;

				picker.setListWidth(0, 200);
				picker.setListWidth(1, 300);

				picker.addEventListener(Event.SELECT, handleSelect);
			}

			private function createTimePicker():void {
				var picker:Picker = new Picker();
				picker.setListBackgroundSkin(PickerListBackgroundWhite);
				picker.name = "timePicker";
				picker.width = 168;
				picker.height = 50;

				var hours:Array = [],
					minutes:Array = [],
					i:int;

				for (i = 0; i < 24; i++) {
					hours.push({label: (i < 10) ? '0' + i : '' + i, value: i});
				}

				for (i = 0; i < 60; i += _minuteStep) {
					minutes.push({label: (i < 10) ? '0' + i : '' + i, value: i});
				}

				var dayDP:DataProvider = new DataProvider(hours),
					monthDP:DataProvider = new DataProvider(minutes),
					dpp:Array = new Array();

				dpp.push(dayDP);
				dpp.push(monthDP);

				picker.dataProvider = new DataProvider(dpp);

				picker.setListWidth(0, 200);
				picker.setListWidth(1, 200);

				picker.x = 200;

				pickerContainer.addChild(picker);
				picker.addEventListener(Event.SELECT, handleSelect);

			}

			private function createSwitch():void {
				arrDepSwitch = new ToggleSwitch();
				arrDepSwitch.defaultLabel = _locale.getResource("scheduler.arrdepart.arrival");
				arrDepSwitch.selectedLabel = _locale.getResource("scheduler.arrdepart.depart");
				arrDepSwitch.width = arrDepToggleSwitchContainer.width;

				arrDepToggleSwitchContainer.height = arrDepSwitch.height;

				arrDepSwitch.selected = true;

				arrDepToggleSwitchContainer.addChild(arrDepSwitch);
			}

			private function parseDateForPicker(day:int, month:int, year:int, hours:int = 0, minutes:int = 0):void {
				var picker:Picker = pickerContainer.getChildByName("datePicker") as Picker,
					timePicker:Picker = pickerContainer.getChildByName("timePicker") as Picker;

				if (!picker || !timePicker) {
					return;
				}

				var tmp:Date = this.selectedDate;
				tmp.setDate(day);
				tmp.setMonth(month);
				tmp.setFullYear(year);
				tmp.setHours(hours);
				tmp.setMinutes(minutes);
				tmp.setSeconds(0);

				if (new Date().getTime() > tmp.getTime()) {
					tmp.setFullYear(year + 1);
				}

				this.selectedDate = tmp;

				var dayIndex:int = selectedDate.date - 1,
					monthIndex:int = selectedDate.getMonth(),
					hoursIndex:int = selectedDate.hours,
					minutesIndex:int = (_minuteStep * Math.floor(selectedDate.minutes / _minuteStep)) / _minuteStep;

				picker.selectedIndices = [dayIndex, monthIndex];
				timePicker.selectedIndices = [hoursIndex, minutesIndex];
			}

			private function handleSelect(e:Event):void {
				var picker:Picker = pickerContainer.getChildByName("datePicker") as Picker,
					timePicker:Picker = pickerContainer.getChildByName("timePicker") as Picker,

					day:int = picker.selectedIndices[0] + 1,
					month:int = picker.selectedIndices[1],
					year:int = currentYear,
					hours:int = timePicker.selectedIndices[0],
					minutes:int = timePicker.selectedIndices[1] * _minuteStep;

				parseDateForPicker(day, month, year, hours, minutes);
			}
		]]>
	</fx:Script>

	<s:VGroup width="100%"
			  height="100%"
			  paddingLeft="0"
			  paddingRight="5"
			  paddingTop="5"
			  paddingBottom="5"
			  gap="0">
		<s:HGroup verticalAlign="middle">
			<s:BitmapImage source="@Embed(source='images/calendar.png')"
						   smooth="true"
						   width="20"
						   height="20"/>
			<mx:Spacer width="15"/>
			<mx:UIComponent id="arrDepToggleSwitchContainer"
							width="180"/>
			<s:Label text="{LocaleManager.localeManager.getResource('scheduler.arrdepart.at')}"
					 width="40"
					 height="100%"
					 verticalAlign="middle"
					 textAlign="center"
					 fontSize="16"/>
		</s:HGroup>
		<mx:Spacer height="40"/>
		<mx:UIComponent id="pickerContainer"
						height="60"/>
	</s:VGroup>
</s:Group>
