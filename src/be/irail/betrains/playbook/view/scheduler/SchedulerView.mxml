<?xml version="1.0" encoding="utf-8"?>
<components:MainViewItem xmlns:fx="http://ns.adobe.com/mxml/2009"
						 xmlns:s="library://ns.adobe.com/flex/spark"
						 xmlns:mx="library://ns.adobe.com/flex/mx"
						 xmlns:stations="be.irail.api.data.stations.*"
						 xmlns:components="be.irail.betrains.playbook.view.components.*"
						 xmlns:components1="be.irail.betrains.playbook.view.scheduler.components.*"
						 xmlns:scheduler="be.irail.betrains.playbook.view.scheduler.*"
						 xmlns:controls="be.irail.betrains.playbook.view.components.controls.*"
						 creationComplete="mainviewitem1_creationCompleteHandler()">
	<components:states>
		<s:State name="none"/>
		<s:State name="loading"/>
		<s:State name="hasConnections"/>
	</components:states>
	<fx:Script>
		<![CDATA[
			import be.irail.api.data.scheduler.IRConnection;
			import be.irail.api.data.stations.IRStation;
			import be.irail.betrains.playbook.controller.ModelLocator;
			import be.irail.betrains.playbook.data.FavouriteConnection;
			import be.irail.betrains.playbook.utils.PopUpUtil;
			import be.irail.betrains.playbook.view.scheduler.components.ConnectionDetails;
			import be.irail.betrains.playbook.view.scheduler.components.StationListPopUp;

			import mx.events.CloseEvent;

			import qnx.ui.buttons.IconButton;

			import spark.events.IndexChangeEvent;

			include "../resource_wrapper.as";

			private var _popup:StationListPopUp;

			private var _model:ModelLocator = ModelLocator.getInstance();

			override public function make():void {
				dateSelector.selectedDate = new Date();
			}

			public function setDataByFavourite(fav:FavouriteConnection):void {
				presentationModel.clearConnections();
				presentationModel.to = _model.stations.getStationById(fav.toStationId);
				presentationModel.from = _model.stations.getStationById(fav.fromStationId);
			}

			private function selectFromStation_clickHandler(event:MouseEvent):void {
				_popup = new StationListPopUp();
				PopUpUtil.openPopUp(_popup, true);
				_popup.addEventListener(CloseEvent.CLOSE, onFromStationsClose);
			}

			private function onFromStationsClose(event:CloseEvent):void {
				if (_popup && event.detail == StationListPopUp.OK) {
					_popup.removeEventListener(CloseEvent.CLOSE, onFromStationsClose);
					presentationModel.from = _popup.selectedStation;
					_popup = null;
				}
			}

			private function selectToStation_clickHandler(event:MouseEvent):void {
				_popup = new StationListPopUp();
				PopUpUtil.openPopUp(_popup, true);
				_popup.addEventListener(CloseEvent.CLOSE, onToStationsClose);
			}

			private function onToStationsClose(event:CloseEvent):void {
				if (_popup && event.detail == StationListPopUp.OK) {
					_popup.removeEventListener(CloseEvent.CLOSE, onToStationsClose);
					presentationModel.to = _popup.selectedStation;
					_popup = null;
				}
			}

			private function createSearchBtn():void {
				var btn:IconButton = new IconButton();
				btn.setIcon("images/magnifyingglass.png");
				btn.width = searchBtnGroup.width;
				btn.height = searchBtnGroup.height;

				btn.addEventListener(MouseEvent.CLICK, searchBtn_clickHandler);

				searchBtnGroup.addChild(btn);
			}

			private function searchBtn_clickHandler(event:MouseEvent):void {
				if (presentationModel.isValid) {
					presentationModel.getSchedule(dateSelector.arrDep);
				}
			}

			private function onSwapClick(event:MouseEvent):void {
				var from:IRStation = presentationModel.from;
				var to:IRStation = presentationModel.to;

				presentationModel.to = from;
				presentationModel.from = to;
			}

			private function mainviewitem1_creationCompleteHandler():void {
				createSearchBtn();
			}

			private function resultList_changeHandler(event:IndexChangeEvent):void {
				var connection:IRConnection = resultList.selectedItem as IRConnection;
				var details:ConnectionDetails = new ConnectionDetails();
				details.connection = connection;

				PopUpUtil.openPopUp(details, true);
				details.addEventListener(CloseEvent.CLOSE, onDetailsClose);
			}

			private function onDetailsClose(event:CloseEvent):void {
				event.currentTarget.removeEventListener(CloseEvent.CLOSE, onDetailsClose);
				resultList.selectedIndex = -1;
			}

			private function presentationModel_connectionsChangeHandler(event:Event):void {
				if (presentationModel.connections && presentationModel.connections.length > 0) {
					this.currentState = "hasConnections";
				} else {
					this.currentState = "none";
				}
			}
		]]>
	</fx:Script>

	<fx:Declarations>
		<scheduler:SchedulerPresentationModel id="presentationModel"
											  connectionsChange="presentationModel_connectionsChangeHandler(event)"/>
	</fx:Declarations>
	<s:Label styleName="noneLabel"
			 alpha=".3"
			 top="0"
			 bottom="0"
			 right="0"
			 width="610"
			 visible="{!presentationModel.isLoading}"
			 includeInLayout="{!presentationModel.isLoading}"
			 includeIn="none"
			 text="{r('scheduler.none')}"/>

	<components:ConnectionsList id="resultList"
								includeIn="hasConnections"
								left="410"
								width="614"
								height="100%"
								dataProvider="{presentationModel.connections}"
								change="resultList_changeHandler(event)">
	</components:ConnectionsList>

	<s:Group top="0"
			 bottom="0"
			 right="0"
			 visible="{presentationModel.isLoading}"
			 includeInLayout="{presentationModel.isLoading}"
			 width="610"
			 show="loadingSpinner.play();"
			 hide="loadingSpinner.stop();">

		<controls:Spinner id="loadingSpinner"
						  horizontalCenter="0"
						  verticalCenter="0"/>
	</s:Group>

	<s:Rect left="0"
			bottom="0"
			top="0"
			width="410">
		<s:fill>
			<s:BitmapFill source="@Embed(source='images/bg.png')"
						  fillMode="scale"
						  smooth="true"/>
		</s:fill>
		<s:filters>
			<s:DropShadowFilter blurX="6"
								blurY="6"
								strength=".4"
								quality="3"
								angle="45"
								distance="3"/>
		</s:filters>
	</s:Rect>

	<s:VGroup top="30"
			  bottom="0"
			  id="dataCont"
			  width="410"
			  horizontalAlign="center">
		<!--Stations-->
		<s:VGroup width="90%"
				  id="components"
				  verticalAlign="middle"
				  horizontalCenter="0"
				  gap="10">
			<components1:ChooseStationButton id="fromStation"
											 width="100%"
											 height="60"
											 infoLabel="{r('scheduler.station1.label')}"
											 station="{presentationModel.from}"
											 click="selectFromStation_clickHandler(event)"/>

			<components1:ChooseStationButton width="100%"
											 height="60"
											 infoLabel="{r('scheduler.station2.label')}"
											 station="{presentationModel.to}"
											 click="selectToStation_clickHandler(event)"/>
		</s:VGroup>


		<mx:Spacer height="10"/>

		<!--Date Selector-->
		<s:VGroup width="90%"
				  verticalAlign="middle"
				  horizontalCenter="0"
				  gap="40">
			<components1:DateTimeButton id="dateSelector"
										width="100%"
										height="100%"
										dateChange="{presentationModel.when=dateSelector.selectedDate}"/>
			<mx:UIComponent id="searchBtnGroup"
							width="100%"
							height="70"
							horizontalCenter="0"/>
		</s:VGroup>

		<mx:Spacer height="5"/>

		<components1:FavouriteButton id="addToFavs"
									 width="90%"
									 click="presentationModel.favCurrentConnection()"
									 enabled="{presentationModel.canAddToFavourites}"/>
	</s:VGroup>

	<s:Group x="65"
			 y="80"
			 width="30"
			 height="30"
			 click="onSwapClick(event)">
		<s:BitmapImage source="@Embed(source='images/swap.png')"
					   width="30"
					   height="30"
					   rotation="90"
					   smooth="true"/>
		<s:filters>
			<s:DropShadowFilter blurX="6"
								blurY="6"
								strength=".4"
								quality="1"
								angle="90"
								distance="3"/>
		</s:filters>
	</s:Group>

</components:MainViewItem>
