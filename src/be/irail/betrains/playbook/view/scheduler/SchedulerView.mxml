<?xml version="1.0" encoding="utf-8"?>
<components:MainViewItem xmlns:fx="http://ns.adobe.com/mxml/2009"
						 xmlns:s="library://ns.adobe.com/flex/spark"
						 xmlns:mx="library://ns.adobe.com/flex/mx"
						 xmlns:stations="be.irail.api.data.stations.*"
						 xmlns:components="be.irail.betrains.playbook.view.components.*"
						 width="100%"
						 height="100%"
						 xmlns:components1="be.irail.betrains.playbook.view.scheduler.components.*"
						 creationComplete="mainviewitem1_creationCompleteHandler(event)"
						 xmlns:scheduler="be.irail.betrains.playbook.view.scheduler.*"
						 xmlns:controls="be.irail.betrains.playbook.view.components.controls.*">

	<fx:Script>
		<![CDATA[
			import be.irail.api.data.scheduler.IRConnection;
			import be.irail.api.data.stations.IRStation;
			import be.irail.betrains.playbook.view.components.ConnectionDetails;
			import be.irail.betrains.playbook.view.components.StationListPopUp;

			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;

			import qnx.locale.LocaleManager;
			import qnx.ui.buttons.IconButton;

			import spark.components.Application;
			import spark.events.IndexChangeEvent;

			private var _popup:StationListPopUp;

			[Bindable]
			private var _locale:LocaleManager = LocaleManager.localeManager;

			// ----------------------------
			// stationFrom
			// ----------------------------

			private var _stationFrom:IRStation;

			[Bindable(event="stationFromChange")]
			public function get stationFrom():IRStation {
				return _stationFrom;
			}

			public function set stationFrom(value:IRStation):void {
				if (value != _stationFrom) {
					_stationFrom = value;
					dispatchEvent(new Event("stationFromChange"));
				}
			}

			// ----------------------------
			// stationTo
			// ----------------------------

			private var _stationTo:IRStation;

			[Bindable(event="stationToChange")]
			public function get stationTo():IRStation {
				return _stationTo;
			}

			public function set stationTo(value:IRStation):void {
				if (value != _stationTo) {
					_stationTo = value;
					dispatchEvent(new Event("stationToChange"));
				}
			}

			protected function selectFromStation_clickHandler(event:MouseEvent):void {
				if (_popup) {
					_popup.close();
				}
				_popup = new StationListPopUp();

				var mainApp:Application = FlexGlobals.topLevelApplication as Application;
				PopUpManager.addPopUp(_popup, mainApp as DisplayObject, true);

				_popup.x = (mainApp.width / 2) - (_popup.width / 2);
				_popup.y = (mainApp.height / 2) - (_popup.height / 2) - 100;

				_popup.addEventListener(CloseEvent.CLOSE, onFromStationsClose);
			}

			private function onFromStationsClose(event:CloseEvent):void {
				if (event.detail == StationListPopUp.OK) {
					this.stationFrom = _popup.selectedStation;
				}
				_popup = null;
			}

			protected function selectToStation_clickHandler(event:MouseEvent):void {
				if (_popup) {
					_popup.close();
				}
				_popup = new StationListPopUp();

				var mainApp:Application = FlexGlobals.topLevelApplication as Application;
				PopUpManager.addPopUp(_popup, mainApp as DisplayObject, true);

				_popup.x = (mainApp.width / 2) - (_popup.width / 2);
				_popup.y = (mainApp.height / 2) - (_popup.height / 2) - 100;

				_popup.addEventListener(CloseEvent.CLOSE, onToStationsClose);
			}

			private function onToStationsClose(event:CloseEvent):void {
				if (event.detail == StationListPopUp.OK) {
					this.stationTo = _popup.selectedStation;
				}
				_popup = null;
			}

			private function createSearchBtn():void {
				var btn:IconButton = new IconButton();
				btn.setIcon("images/magnifyingglass.png");
				btn.width = searchBtnGroup.width;
				btn.height = searchBtnGroup.height;

				btn.addEventListener(MouseEvent.CLICK, searchBtn_clickHandler);

				searchBtnGroup.addChild(btn);
			}

			protected function searchBtn_clickHandler(event:MouseEvent):void {
				if (validateGUI()) {
					presentationModel.getSchedule(stationFrom, stationTo, dateSelector.selectedDate, dateSelector.arrDep);
				}
			}

			protected function onSwapClick(event:MouseEvent):void {
				var from:IRStation = this.stationFrom;
				var to:IRStation = this.stationTo;

				this.stationTo = from;
				this.stationFrom = to;
			}

			protected function mainviewitem1_creationCompleteHandler(event:FlexEvent):void {
				createSearchBtn();
			}

			private function validateGUI():Boolean {
				return stationFrom != null && stationTo != null && (dateSelector && dateSelector.selectedDate);
			}

			protected function resultList_changeHandler(event:IndexChangeEvent):void {
				var connection:IRConnection = resultList.selectedItem as IRConnection;
				var details:ConnectionDetails = new ConnectionDetails();
				details.connection = connection;

				PopUpManager.addPopUp(details, FlexGlobals.topLevelApplication as DisplayObject, true)
				PopUpManager.centerPopUp(details);
			}
		]]>
	</fx:Script>

	<fx:Declarations>
		<scheduler:SchedulerPresentationModel id="presentationModel"/>
	</fx:Declarations>

	<components:ConnectionsList id="resultList"
								top="0"
								bottom="0"
								right="0"
								width="595"
								visible="{presentationModel.hasConnections}"
								includeInLayout="{presentationModel.hasConnections}"
								dataProvider="{presentationModel.connections}">
		<!--change="resultList_changeHandler(event)"-->
	</components:ConnectionsList>

	<s:Group top="0"
			 bottom="0"
			 right="0"
			 visible="{presentationModel.isLoading}"
			 includeInLayout="{presentationModel.isLoading}"
			 width="595"
			 show="loadingSpinner.play();"
			 hide="loadingSpinner.stop();">
		<controls:Spinner id="loadingSpinner"
						  horizontalCenter="0"
						  verticalCenter="0"
						  tickColor="#ffffff"/>
	</s:Group>

	<s:Rect left="0"
			bottom="0"
			top="0"
			width="430">
		<s:fill>
			<s:BitmapFill source="@Embed(source='images/bg.png')"
						  fillMode="scale"
						  smooth="true"/>
		</s:fill>
		<s:filters>
			<s:DropShadowFilter blurX="6"
								blurY="6"
								strength=".4"
								quality="3"
								angle="45"
								distance="3"/>
		</s:filters>
	</s:Rect>

	<s:VGroup top="10"
			  bottom="0"
			  id="dataCont"
			  width="430"
			  horizontalAlign="center">
		<!--Stations-->
		<s:VGroup width="90%"
				  id="components"
				  verticalAlign="middle"
				  horizontalCenter="0"
				  gap="10">
			<components1:ChooseStationButton id="fromStation"
											 width="100%"
											 height="60"
											 infoLabel="{_locale.getResource('scheduler.station1.label')}"
											 station="{stationFrom}"
											 click="selectFromStation_clickHandler(event)"/>

			<components1:ChooseStationButton width="100%"
											 height="60"
											 infoLabel="{_locale.getResource('scheduler.station2.label')}"
											 station="{stationTo}"
											 click="selectToStation_clickHandler(event)"/>
		</s:VGroup>


		<mx:Spacer height="20"/>

		<!--Date Selector-->
		<s:VGroup width="90%"
				  verticalAlign="middle"
				  horizontalCenter="0"
				  gap="20">
			<components:DateTimeButton id="dateSelector"
									   width="100%"
									   height="100%"/>
			<mx:UIComponent id="searchBtnGroup"
							width="100%"
							height="70"
							horizontalCenter="0"/>
		</s:VGroup>
	</s:VGroup>

	<s:Group x="65"
			 y="60"
			 width="30"
			 height="30"
			 click="onSwapClick(event)">
		<s:BitmapImage source="@Embed(source='images/swap.png')"
					   width="30"
					   height="30"
					   rotation="90"
					   smooth="true"/>
	</s:Group>
</components:MainViewItem>
