<?xml version="1.0" encoding="utf-8"?>
<components:MainViewItem xmlns:fx="http://ns.adobe.com/mxml/2009"
						 xmlns:s="library://ns.adobe.com/flex/spark"
						 xmlns:mx="library://ns.adobe.com/flex/mx"
						 xmlns:stations="be.irail.api.data.stations.*"
						 xmlns:components="be.irail.betrains.playbook.view.components.*"
						 width="100%"
						 height="100%"
						 xmlns:components1="be.irail.betrains.playbook.view.scheduler.components.*"
						 creationComplete="mainviewitem1_creationCompleteHandler(event)">

	<fx:Script>
		<![CDATA[
			import be.irail.api.data.stations.IRStation;
			import be.irail.betrains.playbook.view.components.StationListPopUp;

			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;

			import qnx.locale.LocaleManager;
			import qnx.ui.buttons.IconButton;
			import qnx.ui.buttons.ToggleSwitch;
			import qnx.ui.data.DataProvider;
			import qnx.ui.picker.Picker;

			import spark.components.Application;

			private var _popup:StationListPopUp;

			[Bindable]
			private var _locale:LocaleManager = LocaleManager.localeManager;

			// ----------------------------
			// stationFrom
			// ----------------------------

			private var _stationFrom:IRStation;

			[Bindable(event="stationFromChange")]
			public function get stationFrom():IRStation {
				return _stationFrom;
			}

			public function set stationFrom(value:IRStation):void {
				if (value != _stationFrom) {
					_stationFrom = value;
					dispatchEvent(new Event("stationFromChange"));
				}
			}

			// ----------------------------
			// stationTo
			// ----------------------------

			private var _stationTo:IRStation;

			[Bindable(event="stationToChange")]
			public function get stationTo():IRStation {
				return _stationTo;
			}

			public function set stationTo(value:IRStation):void {
				if (value != _stationTo) {
					_stationTo = value;
					dispatchEvent(new Event("stationToChange"));
				}
			}

			protected function selectFromStation_clickHandler(event:MouseEvent):void {
				if (_popup) {
					_popup.close();
				}
				_popup = new StationListPopUp();

				var mainApp:Application = FlexGlobals.topLevelApplication as Application;
				PopUpManager.addPopUp(_popup, mainApp as DisplayObject, true);

				_popup.x = (mainApp.width / 2) - (_popup.width / 2);
				_popup.y = (mainApp.height / 2) - (_popup.height / 2) - 100;

				_popup.addEventListener(CloseEvent.CLOSE, onFromStationsClose);
			}

			private function onFromStationsClose(event:CloseEvent):void {
				if (event.detail == StationListPopUp.OK) {
					this.stationFrom = _popup.selectedStation;
				}
				_popup = null;
			}

			protected function selectToStation_clickHandler(event:MouseEvent):void {
				if (_popup) {
					_popup.close();
				}
				_popup = new StationListPopUp();

				var mainApp:Application = FlexGlobals.topLevelApplication as Application;
				PopUpManager.addPopUp(_popup, mainApp as DisplayObject, true);

				_popup.x = (mainApp.width / 2) - (_popup.width / 2);
				_popup.y = (mainApp.height / 2) - (_popup.height / 2) - 100;

				_popup.addEventListener(CloseEvent.CLOSE, onToStationsClose);
			}

			private function onToStationsClose(event:CloseEvent):void {
				if (event.detail == StationListPopUp.OK) {
					this.stationTo = _popup.selectedStation;
				}
				_popup = null;
			}

			private function createSearchBtn():void {
				var btn:IconButton = new IconButton();
				btn.setIcon("icons/magnifyingglass.png");
				btn.width = searchBtnGroup.width;
				btn.height = searchBtnGroup.height;

				searchBtnGroup.addChild(btn);
			}

			protected function searchBtn_clickHandler(event:MouseEvent):void {


			}

			protected function onSwapClick(event:MouseEvent):void {
				var from:IRStation = this.stationFrom;
				var to:IRStation = this.stationTo;

				this.stationTo = from;
				this.stationFrom = to;
			}

			protected function mainviewitem1_creationCompleteHandler(event:FlexEvent):void {
				createSearchBtn();
			}
		]]>
	</fx:Script>

	<fx:Declarations>
	</fx:Declarations>

	<s:Rect left="0"
			right="0"
			top="0"
			height="150">
		<s:fill>
			<s:SolidColor color="white"/>
		</s:fill>
		<s:filters>
			<s:DropShadowFilter blurX="6"
								blurY="6"
								strength=".4"
								quality="3"
								angle="90"
								distance="3"/>
		</s:filters>
	</s:Rect>
	<s:VGroup top="10"
			  id="dataCont"
			  width="100%"
			  height="100%"
			  horizontalAlign="center">

		<s:HGroup width="90%"
				  id="components"
				  verticalAlign="middle"
				  horizontalCenter="0"
				  gap="5">
			<s:BitmapImage source="@Embed(source='icons/calendar.png')"
						   smooth="true"
						   width="20"
						   height="20"/>
			<mx:Spacer width="5"/>
			<components1:ChooseStationButton id="fromStation"
											 width="100%"
											 height="60"
											 infoLabel="{_locale.getResource('scheduler.station1.label')}"
											 station="{stationFrom}"
											 click="selectFromStation_clickHandler(event)"/>
			<s:Group mouseChildren="false"
					 click="onSwapClick(event)"
					 height="100%">
				<s:BitmapImage source="@Embed(source='icons/swap.png')"
							   width="30"
							   height="30"
							   verticalCenter="0"
							   smooth="true"/>
			</s:Group>

			<components1:ChooseStationButton width="100%"
											 height="60"
											 infoLabel="{_locale.getResource('scheduler.station2.label')}"
											 station="{stationTo}"
											 click="selectToStation_clickHandler(event)"/>
		</s:HGroup>

		<s:HGroup width="90%"
				  verticalAlign="middle"
				  horizontalCenter="0"
				  gap="5">
			<components:DateTimeButton width="100%"
									   height="100%"/>
			<mx:UIComponent id="searchBtnGroup"
							width="70"
							height="70"
							horizontalCenter="0"/>
		</s:HGroup>
	</s:VGroup>
</components:MainViewItem>
