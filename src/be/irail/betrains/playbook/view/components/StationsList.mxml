<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 resize="group1_resizeHandler(event)"
		 creationComplete="createList();"
		 xmlns:ns="http://ns.renaun.com/mxml/2010"
		 xmlns:listClasses="qnx.ui.listClasses.*">
	<fx:Metadata>
		[Event(name="change",type="flash.events.Event")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import be.irail.api.data.stations.IRStation;

			import flash.utils.setTimeout;

			import mx.collections.ArrayCollection;
			import mx.events.ResizeEvent;

			import qnx.ui.data.SectionDataProvider;
			import qnx.ui.events.ListEvent;
			import qnx.ui.listClasses.ListSelectionMode;

			include "../resource_wrapper.as";

			private var _listData:Array;

			// ----------------------------
			// dataProvider
			// ----------------------------

			private var _dataProvider:ArrayCollection;

			[Bindable(event="dataProviderChange")]
			public function get dataProvider():ArrayCollection {
				return _dataProvider;
			}

			public function set dataProvider(value:ArrayCollection):void {
				_dataProvider = value;
				updateDataProvider();
				dispatchEvent(new Event("dataProviderChange"));
			}

			// ----------------------------
			// selectedItem
			// ----------------------------

			[Bindable(event="selectedItemChange")]
			public function get selectedItem():Object {
				if (!list || !list.selectedItem) {
					return null;
				}

				return list.selectedItem.value;
			}

			public function set selectedItem(value:Object):void {
				if (list) {
					if (!value) {
						list.selectedItems = [];
						dispatchEvent(new Event(Event.CHANGE));
						dispatchEvent(new Event("selectedItemChange"));
						return;
					}

					var items:int = _listData.length;
					while (--items > -1) {
						var stationItem:Object = _listData[items];
						if (stationItem.value == value) {
							list.selectedItem = stationItem;
							list.scrollToIndexInSection(stationItem.sectIndex, stationItem.itemIndex, 1);
							setTimeout(dispatchSelectItem, 70);
							break;
						}
					}

				}
			}

			private function dispatchSelectItem():void {
				dispatchEvent(new Event(Event.CHANGE));
				dispatchEvent(new Event("selectedItemChange"));
			}

			// ----------------------------
			// selectedIndex
			// ----------------------------


			[Bindable(event="selectedIndexChange")]
			public function get selectedIndex():int {
				if (!list || !list.selectedItem) {
					return -1;
				}

				return list.selectedIndex;
			}


			private function createList():void {
				list.setSize(this.width, this.height);
				updateDataProvider();
				list.addEventListener(ListEvent.ITEM_CLICKED, onListItemClicked);
			}

			private function onListItemClicked(event:ListEvent):void {
				dispatchEvent(new Event(Event.CHANGE));
			}

			private function group1_resizeHandler(event:ResizeEvent):void {
				list.setSize(this.width, this.height);
			}

			private function updateDataProvider():void {
				if (!list || !dataProvider || !dataProvider.length) {
					return
				}

				var alphabet:Array = [],
					dpNum:int = dataProvider.length,
					station:IRStation,
					char:String;

				while (--dpNum > -1) {
					station = dataProvider.getItemAt(dpNum) as IRStation;
					char = station.name.substr(0, 1).toUpperCase();

					if (alphabet.indexOf(char) == -1) {
						alphabet.push(char);
					}
					station = null;
					char = null;
				}

				dpNum = dataProvider.length;
				alphabet.sort();

				var sectionDP:SectionDataProvider = new SectionDataProvider();

				var sectionId:int = 0;
				for (sectionId = 0; sectionId < alphabet.length; sectionId++) {
					sectionDP.addItem({label: alphabet[sectionId]});
				}

				_listData = [];

				var stationId:int = 0;
				for (stationId = 0; stationId < dpNum; stationId++) {
					station = dataProvider.getItemAt(stationId) as IRStation;
					char = station.name.substr(0, 1).toUpperCase();

					var sectionIndex:int = alphabet.indexOf(char),
						itemInSection:int = sectionDP.getChildrenAtIndex(sectionIndex) ? sectionDP.getChildrenAtIndex(sectionIndex).length : 0,
						o:Object = {label: station.formattedName, value: station, itemIndex: itemInSection, sectIndex: sectionIndex};

					_listData.push(o);

					sectionDP.addChildToIndex(o, sectionIndex);
					station = null;
					char = null;
				}

				list.dataProvider = sectionDP;
			}
		]]>
	</fx:Script>
	<fx:Declarations>
	</fx:Declarations>
	<ns:QContainer>
		<listClasses:SectionList id="list"
								 selectionMode="{ListSelectionMode.SINGLE}"
								 headerHeight="40"/>
	</ns:QContainer>
</s:Group>
