<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
					  xmlns:s="library://ns.adobe.com/flex/spark"
					  xmlns:mx="library://ns.adobe.com/flex/mx"
					  width="100%"
					  height="54"
					  skinClass="be.irail.betrains.playbook.view.components.skins.ApplicationBarSkin"
					  xmlns:components="be.irail.betrains.playbook.view.components.*"
					  creationComplete="creationCompleteHandler()">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Metadata>
		[Event(name="change",type="spark.events.IndexChangeEvent")]
	</fx:Metadata>

	<fx:Script>
		<![CDATA[
			import com.greensock.TweenLite;
			import com.greensock.easing.Expo;

			import mx.core.IVisualElement;

			import spark.events.IndexChangeEvent;
			private var _created:Boolean;
			// ----------------------------
			// selectedIndex
			// ----------------------------

			private var _selectedIndex:int = -1;

			[Bindable(event="change")]
			public function get selectedIndex():int {
				return _selectedIndex;
			}

			public function set selectedIndex(value:int):void {
				if (value != _selectedIndex) {
					var oldIndex:int = _selectedIndex;
					_selectedIndex = value;
					applySelectedIndex();
					dispatchEvent(new IndexChangeEvent(IndexChangeEvent.CHANGE, false, false, oldIndex, value));
				}
			}

			private function applySelectedIndex():void {
				if (_created) {
					unselectAll();
					var isFirst:Boolean;
					if (_selectedIndex == -1) {
						_selectedIndex = 0;
						isFirst = true;
						dispatchEvent(new IndexChangeEvent(IndexChangeEvent.CHANGE, false, false, -1, 0));
					}
					var btn:ApplicationBarButton = getButtonByIndex(_selectedIndex),
						newX:int = btn.x,
						newW:int = btn.width;

					if (!isFirst) {
						TweenLite.to(indicator, .6, {x: newX, ease: Expo.easeOut, onComplete: function():void {
											 btn.selected = true;
										 }
									 });
					} else {
						indicator.x = newX;
						indicator.width = newW;
						indicator.visible = true;
					}
				}
			}

			private function getButtonByIndex(index:int):ApplicationBarButton {
				var i:int = 0, count:int = 0, element:IVisualElement;
				for (i = 0; i < buttons.numElements; i++) {
					element = buttons.getElementAt(i);
					if (element is ApplicationBarButton) {
						if (count == index) {
							return ApplicationBarButton(element);
						}
						count++;
					}
				}
				return null;
			}

			private function getButtonIndex(btn:ApplicationBarButton):int {
				var i:int = 0, count:int = 0, element:IVisualElement;
				for (i = 0; i < buttons.numElements; i++) {
					element = buttons.getElementAt(i);
					if (element is ApplicationBarButton) {
						if (element === btn) {
							return count;
						}
						count++;
					}
				}
				return -1;
			}

			private function getSelectedButtonIndex():int {
				var i:int = 0, count:int = 0, element:IVisualElement;
				for (i = 0; i < buttons.numElements; i++) {
					element = buttons.getElementAt(i);
					if (element is ApplicationBarButton) {
						if (ApplicationBarButton(element).selected) {
							return count;
						}
						count++;
					}
				}
				return 0;
			}

			private function unselectAll():void {
				var i:int = 0, count:int = 0, element:IVisualElement;
				for (i = 0; i < buttons.numElements; i++) {
					element = buttons.getElementAt(i);
					if (element is ApplicationBarButton) {
						ApplicationBarButton(element).selected = false;
					}
				}
			}

			private function creationCompleteHandler():void {
				_created = true;
				applySelectedIndex();
			}

			protected function changeHandler(event:Event):void {
				var btn:ApplicationBarButton = ApplicationBarButton(event.target);
				var index:int = getButtonIndex(btn);
				if (index == selectedIndex) {
					btn.selected = true;
				} else {
					selectedIndex = index;
				}
			}
		]]>
	</fx:Script>

	<s:Group id="buttons"
			 horizontalCenter="0"
			 minWidth="600"
			 maxWidth="1024"
			 top="1">
		<s:layout>
			<s:TileLayout columnAlign="justifyUsingWidth"
						  rowAlign="justifyUsingHeight"
						  orientation="columns"
						  verticalAlign="middle"
						  requestedRowCount="1"/>
		</s:layout>

		<s:Rect id="indicator"
				height="{buttons.height}"
				topLeftRadiusX="4"
				topLeftRadiusY="4"
				topRightRadiusX="4"
				topRightRadiusY="4"
				includeInLayout="false"
				visible="false">
			<s:fill>
				<s:SolidColor color="white"
							  alpha=".6"/>
			</s:fill>
			<s:filters>
				<s:DropShadowFilter inner="true"
									blurX="2"
									blurY="2"
									color="0"
									distance="1"
									angle="90"/>
			</s:filters>
		</s:Rect>
		<!--<components:ApplicationBarButton id="recents"
										 label="{resourceManager.getString('resources','application.controlbar.recent')}"
										 image="@Embed(source='icons/recent.png')"
										 change="changeHandler(event)"/>-->
		<!--<components:ApplicationBarButton id="favs"
										 label="{resourceManager.getString('resources','application.controlbar.favs')}"
										 image="@Embed(source='icons/favs.png')"
										 change="changeHandler(event)"/>-->
		<components:ApplicationBarButton id="schedule"
										 label="{resourceManager.getString('resources','application.controlbar.scheduler')}"
										 image="@Embed(source='icons/schedule.png')"
										 change="changeHandler(event)"/>
		<components:ApplicationBarButton id="stations"
										 label="{resourceManager.getString('resources','application.controlbar.stations')}"
										 image="@Embed(source='icons/stations.png')"
										 change="changeHandler(event)"/>
		<!--<components:ApplicationBarButton id="chat"
										 label="{resourceManager.getString('resources','application.controlbar.chat')}"
										 image="@Embed(source='icons/chat.png')"
										 change="changeHandler(event)"
										 enabled="false"/>-->
	</s:Group>
</s:SkinnableContainer>
