<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
					  xmlns:s="library://ns.adobe.com/flex/spark"
					  xmlns:mx="library://ns.adobe.com/flex/mx"
					  xmlns:ns="http://ns.renaun.com/mxml/2010"
					  xmlns:picker="qnx.ui.picker.*"
					  backgroundAlpha="0"
					  backgroundColor="0"
					  show="showHandler()"
					  click="bodyClick(event)"
					  creationComplete="createComponents()"
					  scrollRect="{new Rectangle(0,0,width,150)}">

	<fx:Metadata>
		[Event(name="hideBar",type="flash.events.Event")]
	</fx:Metadata>
	<s:filters>
		<s:DropShadowFilter blurX="6"
							blurY="6"
							strength=".4"
							quality="3"
							angle="0"
							distance="3"/>
	</s:filters>
	<fx:Script>
		<![CDATA[
			import be.irail.api.core.IRailAPISettings;
			import be.irail.betrains.playbook.controller.AppSettings;
			import be.irail.betrains.playbook.controller.ModelLocator;
			import be.irail.betrains.playbook.utils.DataStorageUtil;
			import be.irail.betrains.playbook.utils.LocalisationUtil;

			import com.greensock.TweenLite;
			import com.greensock.easing.Expo;

			import flash.utils.setTimeout;

			import qnx.locale.LocaleManager;
			import qnx.ui.data.DataProvider;
			import qnx.ui.picker.Picker;
			import qnx.ui.skins.picker.PickerListBackgroundWhite;

			include "../resource_wrapper.as";

			private var _model:ModelLocator = ModelLocator.getInstance();

			private var _isOpen:Boolean;

			private function get currentLocale():String {
				return LocaleManager.localeManager.getCurrentLocale();
			}

			private function askHide():void {
				if (_isOpen) {
					_isOpen = false
					doHide();
				}
			}

			private function doHide():void {
				saveSettings();

				settings.y = 0;
				TweenLite.to(settings, .6, {y: -settings.height, ease: Expo.easeOut, onComplete: sendHideNotification});
			}

			private function sendHideNotification():void {
				setTimeout(function():void {
					dispatchEvent(new Event("hideBar"));
				}, 500);
			}

			private function saveSettings():void {
				var lpicker:Picker = langPickerContainter.getChildByName("langPicker") as Picker;
				if (lpicker && lpicker.selectedIndices.length > 0) {
					var result:Object = lpicker.selectedItems[0];
					var newLang:String = result.value;
					changeToLocale(newLang);
				}

				var rpicker:Picker = recentInputContainter.getChildByName("recentsPicker") as Picker;
				if (rpicker) {
					AppSettings.MAX_NUM_STORED_RECENTS = rpicker.selectedItems[0].value;

					if (_model.recentSchedulerQueries && _model.recentSchedulerQueries.length > AppSettings.MAX_NUM_STORED_RECENTS) {
						var diff:int = _model.recentSchedulerQueries.length - AppSettings.MAX_NUM_STORED_RECENTS;
						while (diff--) {
							_model.recentSchedulerQueries.removeItemAt(0);
						}
					}
				}

				DataStorageUtil.writeSettings();
			}

			private function showHandler():void {
				_isOpen = false;
				settings.y = -settings.height;

				TweenLite.to(settings, .6, {y: 0, ease: Expo.easeOut, onComplete: introComplete});
			}

			private function introComplete():void {
				_isOpen = true;
				loadSettings();
			}

			private function bodyClick(e:MouseEvent):void {
				if (e.localY > 150) {
					askHide();
				}
			}

			private function createTimePicker():void {
				var picker:Picker = new Picker();
				picker.setListBackgroundSkin(PickerListBackgroundWhite);
				picker.name = "langPicker";
				picker.width = 200;
				picker.height = 50;
				picker.isOpen = true;

				picker.setListWidth(0, 200);

				var langs:Array = [], currIdx:int;
				for each (var lang:String in AppSettings.supportedLanguagesLocale) {
					langs.push({label: r('system.languages.' + lang), value: lang});
				}

				var dp:DataProvider = new DataProvider([new DataProvider(langs)]);
				picker.dataProvider = dp;

				langPickerContainter.addChild(picker);
			}

			private function createRecentsPicker():void {
				var picker:Picker = new Picker();
				picker.setListBackgroundSkin(PickerListBackgroundWhite);
				picker.name = "recentsPicker";
				picker.width = 150;
				picker.height = 50;
				picker.isOpen = true;

				picker.setListWidth(0, 200);

				var values:Array = [];
				var max:int = 20;
				var i:int = 0;
				for (i = 0; i < max; i += 5) {
					var itemVal:int = i + 5;
					values.push({label: "" + itemVal, value: itemVal});
				}

				var dp:DataProvider = new DataProvider([new DataProvider(values)]);
				picker.dataProvider = dp

				picker.selectedIndices = [(AppSettings.MAX_NUM_STORED_RECENTS / 5) - 1];

				recentInputContainter.addChild(picker);
			}

			private function changeToLocale(locale:String):void {
				if (locale != currentLocale) {
					IRailAPISettings.mainLanguage = LocalisationUtil.getIRailLangByDeviceLocale(locale);
					LocaleManager.localeManager.setLocale(LocalisationUtil.getLocalisationByDeviceLocale(locale));
				}
			}

			private function createComponents():void {
				createTimePicker();
				createRecentsPicker();
			}

			private function loadSettings():void {
				var langPicker:Picker = langPickerContainter.getChildByName("langPicker") as Picker;

				var currIdx:int;
				for each (var lang:String in AppSettings.supportedLanguagesLocale) {
					if (lang == currentLocale) {
						currIdx = AppSettings.supportedLanguagesLocale.indexOf(lang);
						break;
					}
				}

				langPicker.selectedIndices = [currIdx];

				var rpicker:Picker = recentInputContainter.getChildByName("recentsPicker") as Picker;
				rpicker.selectedIndices = [(AppSettings.MAX_NUM_STORED_RECENTS / 5) - 1];
			}
		]]>
	</fx:Script>

	<s:Group id="settings"
			 width="100%"
			 height="150">
		<s:Rect id="background"
				left="0"
				right="0"
				height="150">
			<s:fill>
				<s:BitmapFill source="@Embed(source='images/bg.png')"
							  fillMode="scale"
							  smooth="true"/>
			</s:fill>
		</s:Rect>

		<s:Group id="settingsData"
				 left="0"
				 right="0"
				 top="0"
				 height="150">

			<s:Label styleName="noneLabel"
					 alpha=".3"
					 x="20"
					 width="240"
					 textAlign="center"
					 verticalCenter="0"
					 text="{r('application.settings')}"/>

			<s:BitmapImage verticalCenter="0"
						   right="10"
						   source="@Embed(source='blackberry-tablet-icon.png')"/>

			<s:Line left="270"
					top="2"
					bottom="2">
				<s:stroke>
					<s:SolidColorStroke color="0"
										alpha=".3"/>
				</s:stroke>
				<s:filters>
					<s:DropShadowFilter blurX="6"
										distance="2"
										quality="2"
										blurY="6"/>
				</s:filters>
			</s:Line>

			<s:Group left="280"
					 width="620"
					 verticalCenter="0">
				<s:layout>
					<s:TileLayout columnAlign="justifyUsingWidth"
								  orientation="columns"
								  verticalAlign="middle"
								  requestedRowCount="1"/>
				</s:layout>

				<s:HGroup gap="5"
						  verticalCenter="0"
						  height="100%"
						  verticalAlign="middle">
					<s:Label text="{r('application.settings.language')}"
							 minWidth="60"
							 textAlign="right"
							 maxDisplayedLines="{NaN}"
							 fontSize="18"/>
					<mx:UIComponent id="langPickerContainter"
									height="50"
									width="200"/>
				</s:HGroup>

				<s:HGroup gap="5"
						  verticalCenter="0"
						  height="100%"
						  verticalAlign="middle">
					<s:Label width="150"
							 textAlign="right"
							 maxDisplayedLines="{NaN}"
							 text="{r('application.settings.numRecent')}"
							 fontSize="18"/>
					<mx:UIComponent id="recentInputContainter"
									height="50"
									width="150"/>
				</s:HGroup>
			</s:Group>

			<s:Line right="115"
					top="2"
					bottom="2">
				<s:stroke>
					<s:SolidColorStroke color="0"
										alpha=".3"/>
				</s:stroke>
				<s:filters>
					<s:DropShadowFilter blurX="6"
										blurY="6"
										distance="2"
										quality="2"
										angle="180"/>
				</s:filters>
			</s:Line>

		</s:Group>


	</s:Group>

</s:SkinnableContainer>
