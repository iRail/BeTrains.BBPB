<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:s="library://ns.adobe.com/flex/spark"
				xmlns:mx="library://ns.adobe.com/flex/mx"
				autoDrawBackground="false"
				mouseChildren="false"
				width="100%"
				height="74">
	<s:states>
		<s:State name="normal"/>
		<s:State name="selected"/>
	</s:states>
	<fx:Script>
		<![CDATA[
			import be.irail.api.data.scheduler.IRConnection;
			import be.irail.betrains.playbook.utils.FormatUtil;

			import qnx.utils.TimeFormatter;

			include "../../resource_wrapper.as";

			override public function set data(value:Object):void {
				super.data = value;
				_connection = value as IRConnection;
				dispatchEvent(new Event("connectionChange"));
			}

			// ----------------------------
			//
			// connection
			//
			// ----------------------------

			private var _connection:IRConnection;

			[Bindable(event="connectionChange")]
			public function get connection():IRConnection {
				return _connection;
			}

			// ---------
			// departure
			// ---------

			[Bindable(event="connectionChange")]
			public function get departureTime():String {
				if (!_connection) {
					return "";
				}

				var date:Date = _connection.departure.dateTime,
					result:String = FormatUtil.formatTime(date);

				return result;
			}

			[Bindable(event="connectionChange")]
			public function get departureStation():String {
				if (!_connection) {
					return "";
				}

				return _connection.departure.station.formattedName;
			}

			[Bindable(event="connectionChange")]
			public function get departurePlatform():String {
				if (!_connection) {
					return "";
				}

				return r("scheduler.results.platform") + " " + _connection.departure.platform.platformNo;
			}

			[Bindable(event="connectionChange")]
			public function get hasDeparturePlatform():Boolean {
				if (!_connection) {
					return false;
				}

				return _connection.departure.platform.platformNo > 0;
			}


			// ---------
			// arrival
			// ---------

			[Bindable(event="connectionChange")]
			public function get arrivalTime():String {
				if (!_connection) {
					return "";
				}

				var date:Date = _connection.arrival.dateTime,
					result:String = FormatUtil.formatTime(date);

				return result;
			}

			[Bindable(event="connectionChange")]
			public function get arrivalStation():String {
				if (!_connection) {
					return "";
				}

				return _connection.arrival.station.formattedName;
			}

			[Bindable(event="connectionChange")]
			public function get arrivalPlatform():String {
				if (!_connection) {
					return "";
				}

				return r("scheduler.results.platform") + " " + _connection.arrival.platform.platformNo;
			}

			[Bindable(event="connectionChange")]
			public function get hasArrivalPlatform():Boolean {
				if (!_connection) {
					return false;
				}

				return _connection.arrival.platform.platformNo > 0;
			}

			[Bindable(event="connectionChange")]
			public function get duration():String {
				if (!_connection) {
					return "";
				}
				return r("scheduler.results.duration") + " " + TimeFormatter.formatSeconds(_connection.duration);
			}

			[Bindable(event="connectionChange")]
			public function get numVias():String {
				if (!_connection) {
					return "";
				}
				return r("scheduler.results.change", _connection.vias.length);
			}

			[Bindable(event="connectionChange")]
			public function get arrivalDelay():String {
				if (!_connection) {
					return "";
				}
				return "" + TimeFormatter.formatSeconds(_connection.arrival.delay);
			}

			[Bindable(event="connectionChange")]
			public function get hasArrivalDelay():Boolean {
				if (!_connection) {
					return false;
				}
				return connection.arrival.delay > 0;
			}

			[Bindable(event="connectionChange")]
			public function get departureDelay():String {
				if (!_connection) {
					return "";
				}
				return "" + TimeFormatter.formatSeconds(_connection.departure.delay);
			}

			[Bindable(event="connectionChange")]
			public function get hasDepartureDelay():Boolean {
				if (!_connection) {
					return false;
				}
				return connection.departure.delay > 0;
			}
		]]>
	</fx:Script>

	<s:Rect left="0"
			right="0"
			top="0"
			bottom="0">
		<s:fill>
			<s:BitmapFill source="@Embed(source='images/cellBg.png')"
						  fillMode="repeat"
						  smooth="true"/>
		</s:fill>
	</s:Rect>

	<s:Rect left="0"
			right="0"
			top="0"
			bottom="0"
			includeIn="selected">
		<s:fill>
			<s:SolidColor color="#ffaa20"
						  alpha=".40"/>
		</s:fill>
	</s:Rect>

	<s:HGroup paddingLeft="10"
			  paddingRight="10"
			  paddingTop="5"
			  paddingBottom="5"
			  width="100%"
			  height="100%">
		<s:VGroup id="fromToTime"
				  width="100%"
				  height="100%">
			<s:HGroup gap="5"
					  height="100%">
				<s:Label id="startTime"
						 text="{departureTime}"
						 fontSize="12"
						 color="0"
						 height="100%"
						 verticalAlign="middle"/>
				<s:Label id="startDelay"
						 text="{'+ '+departureDelay}"
						 fontSize="12"
						 color="red"
						 fontWeight="bold"
						 height="100%"
						 verticalAlign="middle"
						 visible="{hasDepartureDelay}"
						 includeInLayout="{hasDepartureDelay}"/>
			</s:HGroup>
			<s:HGroup gap="0">
				<mx:Spacer width="10"/>
				<s:BitmapImage id="arrowDown"
							   width="10"
							   height="10"
							   horizontalCenter="0"
							   source="@Embed(source='images/arroworange.png')"
							   smooth="true"/>
			</s:HGroup>
			<s:HGroup gap="5"
					  height="100%">
				<s:Label id="stopTime"
						 text="{arrivalTime}"
						 fontSize="12"
						 color="0"
						 height="100%"
						 verticalAlign="middle"/>
				<s:Label id="stopDelay"
						 text="{'+ ' + arrivalDelay}"
						 fontSize="12"
						 fontWeight="bold"
						 color="red"
						 height="100%"
						 verticalAlign="middle"
						 visible="{hasArrivalDelay}"
						 includeInLayout="{hasArrivalDelay}"/>
			</s:HGroup>
		</s:VGroup>

		<s:VGroup width="100%"
				  height="100%">
			<s:Label text="{departureStation}"
					 fontSize="12"
					 color="0"
					 width="100%"
					 height="100%"
					 textAlign="center"
					 verticalAlign="middle"/>

			<s:Label text="{duration}"
					 fontSize="12"
					 color="0"
					 width="100%"
					 height="100%"
					 textAlign="center"
					 verticalAlign="middle"/>

			<s:Label text="{arrivalStation}"
					 fontSize="12"
					 color="0"
					 width="100%"
					 height="100%"
					 textAlign="center"
					 verticalAlign="middle"/>
		</s:VGroup>
		<s:VGroup width="100%"
				  height="100%">
			<s:Label text="{departurePlatform}"
					 fontSize="12"
					 color="0"
					 width="100%"
					 height="100%"
					 textAlign="right"
					 verticalAlign="middle"
					 visible="{hasDeparturePlatform}"/>

			<s:Label text="{numVias}"
					 styleName="infoLabel"
					 fontSize="12"
					 color="0"
					 width="100%"
					 height="100%"
					 textAlign="right"
					 verticalAlign="middle"/>

			<s:Label text="{arrivalPlatform}"
					 fontSize="12"
					 color="0"
					 width="100%"
					 height="100%"
					 textAlign="right"
					 visible="{hasArrivalPlatform}"
					 verticalAlign="middle"/>
		</s:VGroup>
	</s:HGroup>

	<s:Line left="0"
			right="0"
			top="0"
			visible="{this.itemIndex==0}">
		<s:stroke>
			<s:SolidColorStroke color="0"
								weight="1"
								alpha=".4"/>
		</s:stroke>
	</s:Line>
	<s:Line left="0"
			right="0"
			bottom="0">
		<s:stroke>
			<s:SolidColorStroke color="0"
								weight="1"
								alpha=".4"/>
		</s:stroke>
	</s:Line>
</s:ItemRenderer>
