<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:s="library://ns.adobe.com/flex/spark"
				xmlns:mx="library://ns.adobe.com/flex/mx"
				autoDrawBackground="false"
				height="74"
				width="100%">

	<s:states>
		<s:State name="normal"/>
		<s:State name="selected"/>
	</s:states>
	<fx:Script>
		<![CDATA[
			import be.irail.betrains.playbook.data.SchedulerQuery;
			import be.irail.betrains.playbook.utils.DateUtils;

			import qnx.locale.LocaleManager;

			override public function set data(value:Object):void {
				super.data = value;

				if (!value) {
					_queryItem = null;
					return;
				}

				if (data is SchedulerQuery) {
					_queryItem = value as SchedulerQuery;
					dispatchEvent(new Event("queryItemChange"));
				}
			}

			// ----------------------------
			// queryItem
			// ----------------------------

			private var _queryItem:SchedulerQuery;

			[Bindable(event="queryItemChange")]
			public function get queryItem():SchedulerQuery {
				return _queryItem;
			}

			public function set queryItem(value:SchedulerQuery):void {
				if (value != _queryItem) {
					_queryItem = value;
					dispatchEvent(new Event("queryItemChange"));
				}
			}

			// ----------------------------
			// departureStation (read-only)
			// ----------------------------

			[Bindable(event="queryItemChange")]
			public function get departureStation():String {
				if (!queryItem || !queryItem.from) {
					return "";
				}
				return queryItem.from.formattedName;
			}

			[Bindable(event="queryItemChange")]
			public function get arrivalStation():String {
				if (!queryItem || !queryItem.to) {
					return "";
				}
				return queryItem.to.formattedName;
			}

			// ----------------------------
			// arrDepart (read-only)
			// ----------------------------

			[Bindable(event="queryItemChange")]
			public function get when():String {
				if (!queryItem || !queryItem.when) {
					return "";
				}
				return DateUtils.dateTimeFormat(queryItem.when, LocaleManager.localeManager.getResource("recent.when.mask"));
			}

			// ----------------------------
			// arrDepart (read-only)
			// ----------------------------

			[Bindable(event="queryItemChange")]
			public function get arrDepart():String {
				if (!queryItem || !queryItem.departArrival) {
					return "";
				}
				return LocaleManager.localeManager.getResource("recent." + queryItem.departArrival);
			}
		]]>
	</fx:Script>

	<s:Rect left="0"
			right="0"
			top="0"
			bottom="0">
		<s:fill>
			<s:BitmapFill source="@Embed(source='images/cellBg.png')"
						  fillMode="repeat"
						  smooth="true"/>
		</s:fill>
	</s:Rect>

	<s:Rect left="0"
			right="0"
			top="0"
			bottom="0"
			includeIn="selected">
		<s:fill>
			<s:SolidColor color="#ffaa20"
						  alpha=".40"/>
		</s:fill>
	</s:Rect>

	<s:HGroup paddingLeft="10"
			  paddingRight="10"
			  paddingTop="5"
			  paddingBottom="5"
			  width="100%"
			  height="100%">

		<s:VGroup width="100%"
				  height="100%">

			<s:HGroup width="100%"
					  height="100%"
					  verticalAlign="middle"
					  horizontalAlign="center">
				<s:Label text="{arrDepart}"
						 fontSize="14"
						 color="0"
						 height="100%"
						 verticalAlign="middle"/>
				<s:Label text="{LocaleManager.localeManager.getResource('recent.depArrAt')}"
						 fontSize="12"
						 color="0"
						 height="100%"
						 verticalAlign="middle"/>
				<s:Label text="{when}"
						 fontSize="14"
						 color="0"
						 height="100%"
						 verticalAlign="middle"/>
			</s:HGroup>

			<s:HGroup id="fromTo"
					  width="100%"
					  height="100%"
					  verticalAlign="middle">
				<s:Label text="{departureStation}"
						 fontSize="16"
						 color="0"
						 width="100%"
						 height="100%"
						 textAlign="center"
						 fontWeight="bold"
						 verticalAlign="middle"/>
				<s:BitmapImage id="arrowDown"
							   width="10"
							   height="10"
							   horizontalCenter="0"
							   rotation="-90"
							   source="@Embed(source='images/arroworange.png')"
							   smooth="true"/>
				<s:Label text="{arrivalStation}"
						 fontSize="16"
						 color="0"
						 width="100%"
						 height="100%"
						 textAlign="center"
						 fontWeight="bold"
						 verticalAlign="middle"/>
			</s:HGroup>
		</s:VGroup>
	</s:HGroup>

	<s:Line left="0"
			right="0"
			top="0"
			visible="{this.itemIndex==0}">
		<s:stroke>
			<s:SolidColorStroke color="0"
								alpha=".4"
								weight="1"/>
		</s:stroke>
	</s:Line>
	<s:Line left="0"
			right="0"
			bottom="0">
		<s:stroke>
			<s:SolidColorStroke color="0"
								alpha=".4"
								weight="1"/>
		</s:stroke>
	</s:Line>

	<s:Line top="0"
			right="0"
			bottom="0">
		<s:stroke>
			<s:SolidColorStroke color="0"
								alpha=".4"
								weight="1"/>
		</s:stroke>
	</s:Line>
	<s:Line top="0"
			left="0"
			bottom="0">
		<s:stroke>
			<s:SolidColorStroke color="0"
								alpha=".4"
								weight="1"/>
		</s:stroke>
	</s:Line>
</s:ItemRenderer>
