<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="100%"
		 height="100%"
		 creationComplete="group1_creationCompleteHandler(event)">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Metadata>
		[Event(name="stationNameChange",type="flash.events.Event")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;

			import qnx.system.QNXApplication;
			import qnx.ui.text.TextInput;
			import qnx.ui.text.TextInputIconMode;

			// ----------------------------
			// stationName
			// ----------------------------

			private var _stationName:String;

			public function get stationName():String {
				return _stationName;
			}

			public function set stationName(value:String):void {
				if (value !== _stationName) {
					_stationName = value;
				}
			}

			public function doFocus():void {
				var input:TextInput = TextInput(inputContainer.getChildByName("stationInputTxt"));
				if (input) {
					stage.focus = input;
				}
			}

			protected function group1_creationCompleteHandler(event:FlexEvent):void {
				var input:TextInput = new TextInput();
				input.name = "stationInputTxt";
				input.clearIconMode = TextInputIconMode.ALWAYS;
				//input.returnKeyType = ReturnKeyType.;
				//input.keyboardType = KeyboardType.ALPHANUMERIC;

				var txtInputFormat:TextFormat = input.format;

				input.x = 0;
				input.y = 0;
				input.width = inputContainer.width;
				input.height = inputContainer.height;

				input.format = txtInputFormat;
				input.addEventListener(KeyboardEvent.KEY_DOWN, onKeyDown);
				input.addEventListener(Event.CHANGE, onTextInputChange);

				inputContainer.addChild(input);
			}

			private function onKeyDown(event:KeyboardEvent):void {
				if (event.keyCode == Keyboard.ENTER) {
					var input:TextInput = TextInput(inputContainer.getChildByName("stationInputTxt"));
					if (input) {
						stage.focus = null;
						input.text = "";
						dispatchEvent(new Event("stationNameChange"));
					}
				}
			}

			private function onTextInputChange(event:Event):void {
				var input:TextInput = TextInput(event.currentTarget);
				this.stationName = input.text;
			}


			protected function inputContainer_resizeHandler(event:ResizeEvent):void {
				var input:TextInput = TextInput(inputContainer.getChildByName("stationInputTxt"));

				if (input) {
					input.x = 0;
					input.y = 0;
					input.width = inputContainer.width;
					input.height = inputContainer.height;
				}
			}
		]]>
	</fx:Script>

	<mx:UIComponent top="100"
					left="20"
					right="20"
					height="50"
					id="inputContainer"
					resize="inputContainer_resizeHandler(event)">

	</mx:UIComponent>
</s:Group>
