<?xml version="1.0" encoding="utf-8"?>
<components:MainViewItem xmlns:fx="http://ns.adobe.com/mxml/2009"
						 xmlns:s="library://ns.adobe.com/flex/spark"
						 xmlns:mx="library://ns.adobe.com/flex/mx"
						 xmlns:components="be.irail.betrains.playbook.view.components.*"
						 width="100%"
						 height="100%"
						 xmlns:views="qnx.views.*"
						 xmlns:stations="be.irail.betrains.playbook.view.stations.*"
						 xmlns:controls="be.irail.betrains.playbook.view.components.controls.*"
						 creationComplete="mainviewitem1_creationCompleteHandler(event)">
	<fx:Script>
		<![CDATA[
			import spark.events.IndexChangeEvent;
		]]>
	</fx:Script>
	<fx:Declarations>
		<stations:StationsViewPresentationModel id="presentationModel"/>
	</fx:Declarations>
	<components:states>
	</components:states>

	<fx:Script>
		<![CDATA[
			import be.irail.api.data.stations.IRStation;
			import be.irail.betrains.playbook.view.stations.itemrenderer.StationListItem;

			import mx.events.FlexEvent;

			import org.as3commons.lang.StringUtils;

			import qnx.locale.LocaleManager;
			import qnx.ui.text.TextInput;
			import qnx.ui.text.TextInputIconMode;

			protected function mainviewitem1_creationCompleteHandler(event:FlexEvent):void {
				createSearchInput();
				presentationModel.init();
			}

			private function createSearchInput():void {
				var input:TextInput = new TextInput();
				input.name = "searchInput";
				input.clearIconMode = TextInputIconMode.ALWAYS;

				var txtInputFormat:TextFormat = input.format;

				input.x = 0;
				input.y = 1;
				input.prompt = LocaleManager.localeManager.getResource("station.search.prompt");
				input.width = searchInputContainer.width;
				input.height = searchInputContainer.height;

				input.format = txtInputFormat;
				input.addEventListener(Event.CHANGE, onSearchInputChange);

				searchInputContainer.addChild(input);
			}

			private function onSearchInputChange(event:Event):void {
				var input:TextInput = TextInput(searchInputContainer.getChildByName("searchInput"));
				if (input) {
					presentationModel.updateFilter(StringUtils.trim(input.text));
					presentationModel.refreshList();
				}
				if (!stationsList.selectedItem) {
					presentationModel.selectedStation = null;
				}
			}

			private function stationsList_changeHandler(event:IndexChangeEvent):void {
				presentationModel.selectedStation = stationsList.selectedItem as IRStation;
			}
		]]>
	</fx:Script>
	<s:Rect left="0"
			right="0"
			top="0"
			bottom="0"
			alpha=".6"
			visible="{presentationModel.hasStation}">
		<s:fill>
			<s:SolidColor color="#FFFFFF"/>
		</s:fill>
	</s:Rect>

	<s:HGroup width="100%"
			  height="100%"
			  gap="0"
			  paddingLeft="2"
			  paddingRight="2"
			  paddingBottom="2">

		<s:VGroup width="400"
				  height="100%"
				  gap="2">
			<mx:UIComponent width="100%"
							height="30"
							id="searchInputContainer"/>
			<s:List id="stationsList"
					width="100%"
					height="100%"
					dataProvider="{presentationModel.stations}"
					borderVisible="false"
					contentBackgroundAlpha="0"
					change="stationsList_changeHandler(event)"
					itemRenderer="be.irail.betrains.playbook.view.stations.itemrenderer.StationListItem"
					allowMultipleSelection="false">
				<s:layout>
					<s:VerticalLayout useVirtualLayout="true"
									  clipAndEnableScrolling="false"
									  gap="0"
									  variableRowHeight="false"/>
				</s:layout>

			</s:List>
		</s:VGroup>

		<stations:StationProfile id="stationProfile"
								 station="{presentationModel.selectedStation}"
								 width="100%"
								 height="100%"/>
	</s:HGroup>
</components:MainViewItem>
