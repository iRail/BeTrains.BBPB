<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="900"
		 height="540"
		 xmlns:liveboard="be.irail.api.data.liveboard.*"
		 creationComplete="group1_creationCompleteHandler(event)"
		 xmlns:components="be.irail.betrains.playbook.view.components.*"
		 xmlns:controls="be.irail.betrains.playbook.view.components.controls.*">
	<fx:Declarations>
	</fx:Declarations>
	<fx:Metadata>
	</fx:Metadata>
	<s:filters>
		<s:DropShadowFilter blurX="6"
							blurY="6"
							inner="false"
							strength=".6"
							quality="3"
							angle="80"
							distance="3"/>
	</s:filters>
	<fx:Script>
		<![CDATA[
			include "../resource_wrapper.as"

			import be.irail.api.data.liveboard.Liveboard;
			import be.irail.betrains.playbook.utils.FormatUtil;
			import be.irail.betrains.playbook.view.stations.itemrenderer.LiveboardDepartureItemRenderer;

			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;

			import qnx.locale.LocaleManager;

			private var _t:Timer;

			// ----------------------------
			// time
			// ----------------------------

			[Bindable(event="timeChange")]
			public function get time():String {
				return FormatUtil.formatTime(new Date());
			}

			// ----------------------------
			// liveBoard
			// ----------------------------

			private var _liveBoard:Liveboard;

			[Bindable(event="liveBoardChange")]
			public function get liveBoard():Liveboard {
				return _liveBoard;
			}

			public function set liveBoard(value:Liveboard):void {
				if (value != _liveBoard) {
					_liveBoard = value;
					if (value) {
						liveboardItems.dataProvider = new ArrayCollection(liveBoard.departures);
						callLater(evalDate);
					}
					dispatchEvent(new Event("liveBoardChange"));
				}
			}

			// ----------------------------
			// stationName (read-only)
			// ----------------------------

			[Bindable(event="liveBoardChange")]
			public function get stationName():String {
				if (!liveBoard)
					return "";
				return liveBoard.station.name.toUpperCase();
			}

			[Bindable(event="liveBoardChange")]
			[Bindable(event="localeChange")]
			public function get title():String {
				if (!liveBoard)
					return "";
				return r("liveboard.departTitle");
			}

			protected function group1_creationCompleteHandler(event:FlexEvent):void {
				dispatchEvent(new Event("timeChange"));

				_t = new Timer(1000);
				_t.addEventListener(TimerEvent.TIMER, onTimer);
				_t.start();
			}

			private function onTimer(event:TimerEvent):void {
				evalDate();
				dispatchEvent(new Event("timeChange"));
			}

			private function evalDate():void {
				if (!liveboardItems.dataGroup) {
					return;
				}

				var numLBItems:int = liveboardItems.dataGroup.numElements,
					i:int = 0;

				var evalDate:Date = new Date();

				for (i = 0; i < numLBItems; i++) {
					var item:LiveboardDepartureItemRenderer = LiveboardDepartureItemRenderer(liveboardItems.dataGroup.getElementAt(i));
					if (item) {
						item.evaluateIsPast(evalDate);
					}
				}
			}

			private function close():void {
				PopUpManager.removePopUp(this);
			}
		]]>
	</fx:Script>

	<s:BitmapImage id="tv"
				   left="0"
				   right="0"
				   top="0"
				   bottom="0"
				   source="@Embed(source='images/tvscreen.png')"/>

	<controls:CloseButton top="-15"
						  right="-15"
						  close="close()"/>

	<s:Group left="54"
			 right="52"
			 top="47"
			 bottom="45">

		<s:Rect left="0"
				right="0"
				top="0"
				height="75">
			<s:fill>
				<s:SolidColor color="0x1B76F8"/>
			</s:fill>
		</s:Rect>

		<s:Label color="0xFFFFFF"
				 text="{title}"
				 top="20"
				 paddingLeft="10"
				 paddingRight="10"
				 width="100%"
				 textAlign="center"
				 fontSize="50"
				 verticalAlign="bottom"
				 maxDisplayedLines="1"/>

		<s:Label color="0xFFFFFF"
				 text="{time}"
				 top="20"
				 paddingBottom="10"
				 paddingLeft="10"
				 paddingRight="10"
				 textAlign="center"
				 fontSize="50"
				 verticalAlign="bottom"
				 maxDisplayedLines="1"/>

		<s:Label color="0xFFFFFF"
				 text="{stationName}"
				 right="0"
				 top="35"
				 paddingLeft="10"
				 paddingRight="10"
				 textAlign="right"
				 fontSize="30"
				 verticalAlign="bottom"
				 maxDisplayedLines="1"/>

		<s:Group left="0"
				 right="0"
				 top="0"
				 height="75"
				 mouseChildren="false"/>

		<components:BeTrainsList id="liveboardItems"
								 top="75"
								 bottom="0"
								 left="0"
								 right="0"
								 contentBackgroundAlpha="1"
								 contentBackgroundColor="0"
								 verticalAlignContent="top"
								 itemRenderer="be.irail.betrains.playbook.view.stations.itemrenderer.LiveboardDepartureItemRenderer">
		</components:BeTrainsList>
	</s:Group>
</s:Group>
